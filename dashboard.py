import streamlit as st
import requests
import pandas as pd

# --- Configuration ---
API_URL = "http://127.0.0.1:8000/get-retention-list/"
PAGE_TITLE = "Proactive Churn Dashboard"
PAGE_ICON = "ðŸŽ¯"

# --- Page Setup ---
st.set_page_config(page_title=PAGE_TITLE, page_icon=PAGE_ICON, layout="wide")
st.title(f"{PAGE_ICON} {PAGE_TITLE}")

st.markdown("""
This dashboard retrieves a prioritized list of users who are at high risk of churning. 
The list is generated by a machine learning model (XGBoost) served via a FastAPI endpoint.
""")

# --- Main App ---
# We add a number input to make the 'top_n' parameter dynamic
top_n = st.number_input(
    "How many at-risk users do you want to see?", 
    min_value=10, 
    max_value=1000, 
    value=100, 
    step=10
)

# Button to fetch the data
if st.button("Generate At-Risk List", type="primary"):
    
    # Show a spinner while fetching data
    with st.spinner(f"Fetching Top {top_n} At-Risk Users..."):
        try:
            # Make the API call to our FastAPI endpoint
            response = requests.get(API_URL, params={"top_n": top_n})
            response.raise_for_status() # Raises an error for bad responses (4xx or 5xx)
            
            data = response.json()
            
            if data:
                # Convert the JSON (list of dicts) to a DataFrame
                df_results = pd.DataFrame(data)
                
                # Clean up for display
                df_results['churn_probability'] = (df_results['churn_probability'] * 100).round(2)
                df_results = df_results.rename(columns={
                    'user_id': 'User ID',
                    'churn_probability': 'Churn Probability (%)'
                })
                
                st.success(f"Successfully retrieved {len(df_results)} users.")
                
                # Display the data in an interactive table
                st.dataframe(df_results, use_container_width=True, height=500)
                
                # --- Download Button ---
                @st.cache_data
                def convert_df_to_csv(df):
                    return df.to_csv(index=False).encode('utf-8')

                csv = convert_df_to_csv(df_results)
                
                st.download_button(
                    label="Download List as CSV",
                    data=csv,
                    file_name=f"at_risk_users_top_{top_n}.csv",
                    mime="text/csv",
                )
                
            else:
                st.warning("No data returned from the API.")

        except requests.exceptions.ConnectionError:
            st.error(f"Connection Error: Could not connect to the API at {API_URL}. Is the uvicorn server running?")
        except Exception as e:
            st.error(f"An error occurred: {e}")